/*
 * stm32f4xx_gpio_driver.c
 *
 *  Created on: Sep 20, 2025
 *      Author: LENOVO
 */

#include "stm32f4xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
	uint32_temp=0;

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{
		// non - interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		// now do set this mode in the GPIO register struct which is pointing to actual GPIOx peripheral
		pGPIOHandle->pGPIOx->MODER |= temp;

	}
	else
	{
		// interrupt mode - code it later
	}

	//2. configure the speed
	temp=0;
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;

	//3. configure the pupd settings
	temp=0;
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR |= temp;
	//4. configure the optype
	temp=0;
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->OTYPER |= temp;

	//5. configure the altfn
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
	{
			// configure the altfn registers
		uint8_temp1 , temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;

		if(temp1 ==0){
			pGPIOHandle->pGPIOx->AFRL = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunValue << (4 * temp2));

		}
		else
		{
			pGPIOHandle->pGPIOx->AFRH = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunValue << (4 * temp2));
		}


	}

}

void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){

	if(EnorDi == ENABLE){
		// check *pGIOx is pointing to which GPIO peripheral
		if(pGPIOx == GPIOA){
			GPIOA_PCLK_EN();
		}
		else if(pGPIOx == GPIOB){
			GPIOB_PCLK_EN();
		}
		else if(pGPIOx == GPIOC){
			GPIOC_PCLK_EN();
		}
		else if(pGPIOx == GPIOD){
			GPIOD_PCLK_EN();
		}
		else if(pGPIOx == GPIOE){
			GPIOE_PCLK_EN();
		}
		else if(pGPIOx == GPIOF){
			GPIOF_PCLK_EN();
		}
		else if(pGPIOx == GPIOG){
			GPIOG_PCLK_EN();
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_EN();
		}
		else if(pGPIOx == GPIOI){
			GPIOI_PCLK_EN();

		}

	}
	else{
				if(pGPIOx == GPIOA){
					GPIOA_PCLK_DI();
				}
				else if(pGPIOx == GPIOB){
					GPIOB_PCLK_DI();
				}
				else if(pGPIOx == GPIOC){
					GPIOC_PCLK_DI();
				}
				else if(pGPIOx == GPIOD){
					GPIOD_PCLK_DI();
				}
				else if(pGPIOx == GPIOE){
					GPIOE_PCLK_DI();
				}
				else if(pGPIOx == GPIOF){
					GPIOF_PCLK_DI();
				}
				else if(pGPIOx == GPIOG){
					GPIOG_PCLK_DI();
				}
				else if(pGPIOx == GPIOH){
					GPIOH_PCLK_DI();
				}
				else if(pGPIOx == GPIOI){
					GPIOI_PCLK_DI();

				}

	}


}
